$date
  Tue Jun 04 09:40:41 2019
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module alu_tb $end
$var reg 1 ! clk $end
$var reg 16 " input_a[15:0] $end
$var reg 16 # input_b[15:0] $end
$var reg 3 $ action_id[2:0] $end
$var reg 1 % carry $end
$var reg 1 & zero $end
$var reg 1 ' negative $end
$var reg 16 ( result[15:0] $end
$scope module alu_inst $end
$var reg 1 ) clk $end
$var reg 16 * input_a[15:0] $end
$var reg 16 + input_b[15:0] $end
$var reg 3 , action_id[2:0] $end
$var reg 1 - carry $end
$var reg 1 . zero $end
$var reg 1 / negative $end
$var reg 16 0 output_y[15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
U!
b0000000000001010 "
b0000000000000101 #
b000 $
0%
1&
0'
b0000000000000000 (
U)
b0000000000001010 *
b0000000000000101 +
b000 ,
0-
1.
0/
b0000000000000000 0
#1000000
b001 $
0&
b0000000000000101 (
b001 ,
0.
b0000000000000101 0
#2000000
b0000000000000000 #
1&
b0000000000000000 (
b0000000000000000 +
1.
b0000000000000000 0
#3000000
b1111111111111111 #
0&
b1111111111111111 (
b1111111111111111 +
0.
b1111111111111111 0
#4000000
b0000000000000101 #
b010 $
b0000000000001111 (
b0000000000000101 +
b010 ,
b0000000000001111 0
#5000000
b0111111111111111 "
b0000000000000001 #
1%
b1000000000000000 (
b0111111111111111 *
b0000000000000001 +
1-
b1000000000000000 0
#6000000
b0000000000000001 "
b1111111111111111 #
0%
1&
b0000000000000000 (
b0000000000000001 *
b1111111111111111 +
0-
1.
b0000000000000000 0
#7000000
b0000000000001101 "
b0000000000000101 #
b011 $
0&
b0000000000001000 (
b0000000000001101 *
b0000000000000101 +
b011 ,
0.
b0000000000001000 0
#8000000
b1000000000000000 "
b0000000000000001 #
1%
b0111111111111111 (
b1000000000000000 *
b0000000000000001 +
1-
b0111111111111111 0
#9000000
b0000000000001010 "
b100 $
0%
b0000000000010000 (
b0000000000001010 *
b100 ,
0-
b0000000000010000 0
#10000000
b0010011100010000 "
1%
b1010000000000000 (
b0010011100010000 *
1-
b1010000000000000 0
#11000000
b0000000000001010 "
b0000000000000010 #
b101 $
0%
b0000000000101000 (
b0000000000001010 *
b0000000000000010 +
b101 ,
0-
b0000000000101000 0
#12000000
b0100000000000000 "
b0000000000000001 #
1%
b1000000000000000 (
b0100000000000000 *
b0000000000000001 +
1-
b1000000000000000 0
#13000000
b0000000000000001 "
b110 $
0%
1&
b0000000000000000 (
b0000000000000001 *
b110 ,
0-
1.
b0000000000000000 0
#14000000
